<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/app.properties" />
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.uu"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 定义Hibernate Session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan" value="com.uu"/><!-- 如果多个，用“,”分隔 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${hibernate.ehcache.configFile}</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.search.default.directory_provider">filesystem</prop>
				<prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				
				<!--配置审计表名的后缀，默认为空  -->
				<prop key="org.hibernate.envers.audit_table_suffix">_his</prop>
				<!--配置审计表名的前缀，默认为_AUD  -->
			    <prop key="org.hibernate.envers.audit_table_prefix"></prop>
				<!--配置审计表中记录版本号的字段名称  -->
			    <prop key="org.hibernate.envers.revision_field_name">revisionId</prop>
			    <!--配置审计表中数据操作类型的字段名称，0：新增   1：修改   2：删除  -->
			    <prop key="org.hibernate.envers.revision_type_field_name">eventType</prop>
			    <!--配置是否支持关联表修改时记录修改记录,默认为true  -->
			    <prop key="org.hibernate.envers.revision_on_collection_change">true</prop>
			    <!--配置是否不对乐观锁字段修改时记录修改记录，即使用Version字段，默认值为true  -->
			    <prop key="org.hibernate.envers.do_not_audit_optimistic_locking_field">true</prop>
			    <!--配置是否在删除操作时，记录所有字段还是只记录id值。默认为false    false：只记录id   true：记录全部字段  -->
			    <prop key="org.hibernate.envers.store_data_at_delete">true</prop>
			    <!--配置审计表的schema，默认为null  -->
			    <prop key="org.hibernate.envers.default_schema"></prop>
			    <!--配置审计表的catalog，默认为null  -->
			    <prop key="org.hibernate.envers.default_catalog"></prop>
			    <!-- @Audited 标记该实体类或属性支持数据修改记录。
					@NotAudited 标记该属性不支持数据修改记录。
					@RevisionEntity 实现为数据修改记录表保存其他自定义内容
					@RevisionTimestamp 记录修改时间，必须配合@RevisionEntity使用
					@RevisionNumber 修改记录表的版本id 通常是配置成主键
				 -->
			</props>
		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
	</bean>
       
	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
    
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<aop:aspectj-autoproxy /> 
	 <!-- 定义事务 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>
         	<tx:method name="save*"  propagation="REQUIRED" />
         	<tx:method name="update*"  propagation="REQUIRED" />
         	<tx:method name="delete*"  propagation="REQUIRED"/>
         	<tx:method name="import*"  propagation="REQUIRED"/>
            <tx:method name="*"  propagation="SUPPORTS"  read-only="true" />
        </tx:attributes>  
    </tx:advice> 
      
    <!-- 定义切面 -->  
    <aop:config>  
        <aop:pointcut id="interceptorPointCuts" expression="execution(* com.uu.modules..service.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />  
    </aop:config>
	
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	
	<!-- 数据源配置, 使用 Druid 数据库连接池 -->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
    	<!-- 配置拦截的filters stat：监控统计 -->
    	<property name="filters" value="stat,config" /> 
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 name、url、user、password 采用继承覆盖的方式
        <property name="name" value="${jdbc.name}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" /> -->
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.minIdle}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" /> 
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
        
        <property name="defaultAutoCommit" value="true" />
    </bean>
    
    <!-- 数据源配置, 使用应用服务器的数据库连接池 
    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/app" />-->
    
    <!-- 数据源配置, 不使用连接池 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>-->

	<!-- 多环境配置README#快速体验.7 -->
	<!-- 生产环境  -Dspring.profiles.active=production -->
 	<beans profile="production">
		<bean id="dataSource" parent="abstractDataSource">
            <property name="driverClassName" value="${jdbc.driver}" />
			<property name="name" value="${jdbc.name}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
	        <!-- java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools you_password -->
       		<property name="connectionProperties" value="config.decrypt=true" />
        </bean>
        <!-- 多数据源，继承方式避免重复的参数配置 -->
        <!-- 
        <bean id="dataSource2" parent="abstractDataSource">
            <property name="driverClassName" value="${jdbc.driver}" />
			<property name="name" value="${jdbc.name}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="connectionProperties" value="config.decrypt=true" />
        </bean> -->
	</beans>
	
	<!-- 开发环境 -Dspring.profiles.active=development -->
	<beans profile="development">	
		<bean id="dataSource" parent="abstractDataSource">
            <property name="driverClassName" value="${jdbc.dev.driver}" />
			<property name="name" value="${jdbc.name}" />
			<property name="url" value="${jdbc.dev.url}" />
			<property name="username" value="${jdbc.dev.username}" />
			<property name="password" value="${jdbc.dev.password}" />
        </bean>
        <!-- 多数据源，继承方式避免重复的参数配置 -->
        <!-- 
        <bean id="dataSource" parent="abstractDataSource">
            <property name="driverClassName" value="${jdbc.dev.driver}" />
			<property name="name" value="${jdbc.name}" />
			<property name="url" value="${jdbc.dev.url}" />
			<property name="username" value="${jdbc.dev.username}" />
			<property name="password" value="${jdbc.dev.password}" />
        </bean> -->
	</beans>
	
</beans>